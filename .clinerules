{
  "core_principles": {
    "make_it_work": {
      "description": "Focus on getting basic functionality working first",
      "rules": [
        "Start with the simplest implementation",
        "Create minimal viable solutions",
        "Focus on core functionality",
        "Validate basic functionality",
        "Implement basic error handling"
      ]
    },
    "make_it_right": {
      "description": "Ensure code correctness and maintainability",
      "rules": [
        "Write comprehensive tests",
        "Refactor for clarity",
        "Improve error handling",
        "Follow best practices",
        "Add proper types"
      ]
    },
    "make_it_fast": {
      "description": "Optimize performance after code is working correctly",
      "rules": [
        "Profile and identify bottlenecks",
        "Optimize with measured data",
        "Document improvements",
        "Monitor memory usage"
      ]
    },
    "rapid_development": {
      "description": "Focus on quick iterations",
      "rules": [
        "Use existing solutions when possible",
        "Minimize setup time",
        "Keep cycles short",
        "Validate each phase"
      ]
    }
  },
  "documentation": {
    "always_update": {
      "documentation": [
        "Update docs after changes",
        "Keep API references current",
        "Document key decisions",
        "Update examples"
      ],
      "context": [
        "Write clear code comments",
        "Document dependencies",
        "Document architecture",
        "Document optimizations"
      ],
      "status": [
        "Track task progress",
        "Update roadmap",
        "Track issues",
        "Document blockers"
      ]
    }
  },
  "commit_practices": {
    "when_to_commit": [
      "After functionality works",
      "When tests pass",
      "After improvements",
      "After optimizations"
    ],
    "commit_structure": [
      "Clear messages",
      "Reference issues",
      "Include context",
      "Note breaking changes"
    ]
  },
  "implementation_process": [
    "Phase 1 - Make it Work:",
    "Build core features",
    "Verify functionality",
    "Add basic tests",
    "Run tests: pnpm jest feature.test.ts",
    "Phase 2 - Make it Right:",
    "Add more tests",
    "Refactor code",
    "Improve error handling",
    "Review quality",
    "Phase 3 - Make it Fast:",
    "Profile performance",
    "Optimize code",
    "Validate improvements"
  ],
  "review_checklist": [
    "Work Phase:",
    "Core features work",
    "Basic tests pass",
    "Right Phase:",
    "Good test coverage",
    "Clean code",
    "Error handling works",
    "Fast Phase:",
    "Performance improved",
    "All tests pass"
  ],
  "architecture_guidelines": {
    "state_management": [
      "Define state ownership",
      "Handle state changes",
      "Verify consistency",
      "Document flow"
    ],
    "error_handling": [
      "Catch errors properly",
      "Give clear messages",
      "Handle edge cases",
      "Log properly"
    ],
    "testing": [
      "Unit tests",
      "Integration tests",
      "Performance tests",
      "Error tests"
    ]
  }
}