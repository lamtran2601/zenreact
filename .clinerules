{
  "core_principles": {
    "simple_first": {
      "description": "Start with the simplest possible implementation",
      "rules": [
        "Avoid premature optimization",
        "Keep code readable and maintainable",
        "Use straightforward solutions over complex ones"
      ]
    },
    "work_first_optimize_later": {
      "description": "Get basic functionality working before improving performance",
      "rules": [
        "Ensure code passes tests before optimization",
        "Create working prototypes before refining",
        "Document performance bottlenecks for later optimization",
        "Optimize context before sending to AI providers to reduce costs"
      ]
    },
    "rapid_development": {
      "description": "Focus on quick iterations",
      "rules": [
        "Use existing solutions when available",
        "Minimize setup and configuration time",
        "Keep development cycles short"
      ]
    }
  },
  "documentation": {
    "always_update": {
      "documentation": [
        "Update relevant documentation immediately after changes",
        "Keep API references current",
        "Document key decisions and their rationale",
        "Update examples when implementation changes"
      ],
      "context": [
        "Maintain clear context in code comments",
        "Update implementation notes",
        "Document dependencies and requirements",
        "Keep architecture diagrams current",
        "Document context optimization strategies for AI providers"
      ],
      "status": [
        "Track task progress in relevant documents",
        "Update development roadmap",
        "Keep issue/ticket status current",
        "Document any blockers or challenges"
      ]
    }
  },
  "commit_practices": {
    "when_to_commit": [
      "After each working piece of functionality",
      "When documentation is updated",
      "When tests pass",
      "After significant refactoring"
    ],
    "commit_structure": [
      "Clear, descriptive commit messages",
      "Reference related issues/tickets",
      "Include context for changes",
      "Document breaking changes"
    ]
  },
  "implementation_process": [
    "Start with basic implementation",
    "Ensure it works",
    "Write/update tests",
    "Update documentation",
    "Commit changes",
    "Plan optimization if needed",
    "Implement optimization",
    "Update documentation again",
    "Commit optimized version"
  ],
  "review_checklist": [
    "Basic implementation works",
    "Tests pass",
    "Documentation updated",
    "Context added/updated",
    "Status tracked",
    "Changes committed",
    "Optimization needs identified (if any)",
    "Context optimization verified for AI providers"
  ]
}