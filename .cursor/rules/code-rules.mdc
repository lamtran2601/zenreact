---
description: development rules
globs:
alwaysApply: false
---

# Core Development Philosophy

- Focus on working solutions first
- Iterate rapidly with clear context
- Optimize context usage and token efficiency
- Keep solutions simple and direct
- Use precise, technical language
- Avoid conversational fillers

# Communication Strategy

## Task Management

- Focus on one task/question at a time
- Break complex tasks into smaller, focused steps
- Provide clear objectives upfront
- Include only relevant constraints or requirements

## Information Sharing

- Use bullet points over paragraphs
- Remove unnecessary background information
- Avoid repeating known information
- Reference file paths over full contents
- Share only relevant code portions

# Context Rules

## Maximize Efficiency

- Share minimal context per interaction
- Prioritize code-first communication
- Limit architectural discussions unless necessary
- Focus on implementation details
- Reset context after major milestones

## Optimize Token Usage

- Use direct, concise instructions
- Skip non-essential context
- Focus on relevant code segments
- Limit explanatory comments
- Remove redundant information

# Tool Usage Strategy

## Efficient Operations

- Use MCP servers for specialized tasks
- Prefer targeted tool uses over explanations
- Leverage built-in capabilities effectively
- Choose appropriate tools for each task

## Search Optimization

- Use search_files for code patterns
- Leverage list_code_definition_names for exploration
- Use list_files strategically
- Remove boilerplate and unused imports

# Implementation Priorities

## First: Working Solution

- Implement core functionality first
- Use basic error handling
- Create minimal tests
- Write essential documentation

## Second: Quick Iteration

- Gather feedback fast
- Make rapid improvements
- Add necessary features
- Perform basic optimizations

# Development Workflow

## Start Fast

- Use existing patterns when available
- Choose simple over perfect solutions
- Implement minimum requirements
- Skip non-essential features

## Code Smart

- Keep abstractions minimal
- Use direct solutions
- Apply simple patterns
- Focus on core functionality

# Response Optimization

## Code First

- Share essential code only
- Include core functionality
- Provide required context
- Keep comments minimal

## Context Management

- Prune irrelevant information
- Focus on current task
- Share only needed files
- Limit historical context
- Use appropriate modes for tasks
- Minimize unnecessary mode switches

# Testing Strategy

- Test core functionality
- Focus on happy path initially
- Use basic validation
- Skip edge cases early

# Documentation Rules

- Keep docs minimal initially
- Focus on essential usage
- Document core features
- Add details iteratively

# Review Process

## Must Have

- Working core functionality
- Basic error handling
- Essential tests
- No obvious bugs

## Later Optimization

- Detailed documentation
- Performance improvements
- Complete test coverage
- Code cleanup

Remember: Working beats perfect, simple beats complex, now beats later.
