---
description: 'Comprehensive documentation guidelines for maintaining high-quality, accessible, and maintainable documentation'
globs: '**/*.{md,mdx,mdc}'
alwaysApply: false
---

# Documentation Rules

## Core Documentation Philosophy

- Documentation as code - treat docs with the same rigor as code
- Purpose-driven documentation - every doc must serve a clear purpose
- Clear structure over verbose content - prefer concise, well-organized information
- Practical examples over theory - demonstrate with real-world use cases
- Maintainable over exhaustive - focus on sustainable documentation
- Accessibility first - ensure documentation is accessible to all users
- Version control integration - maintain documentation history

# Documentation Strategy

## Structure Guidelines

- Use consistent markdown formatting across all documents
- Organize with clear hierarchical headings (H1 for title, H2 for sections)
- Include table of contents for documents over 100 lines
- Group related information logically
- Follow established mermaid diagram patterns
- Use semantic structure for better accessibility
- Maintain consistent terminology

## Content Quality

- Begin with clear purpose statement and target audience
- Use bullet points for better readability
- Include practical code examples with language specifiers
- Add diagrams for complex concepts
- Keep language technical and precise
- Provide alt text for all images and diagrams
- Include version compatibility information

# Implementation Priorities

## First: Essential Documentation

- Component/feature purpose and architecture
- Usage examples with code snippets
- API/props documentation with TypeScript types
- Dependencies and requirements
- Basic troubleshooting steps
- Accessibility considerations
- Version compatibility notes

## Second: Enhancement

- Comprehensive examples with edge cases
- Performance considerations and benchmarks
- Integration patterns and best practices
- Advanced usage scenarios
- Automated testing examples
- Migration guides
- Localization guidelines

# Documentation Types

## Code Documentation

- Component purpose statements
- Function JSDoc comments with param/return types
- Type definitions with descriptions
- Props documentation with validation
- Return value descriptions
- Runtime performance notes
- Breaking changes warnings

## System Documentation

- Architecture overviews with diagrams
- Data flow visualizations
- Integration patterns and examples
- Environment setup guide
- Deployment processes
- Monitoring and logging
- Security considerations

## User Documentation

- Installation guides with prerequisites
- Configuration options and defaults
- Step-by-step tutorials
- Troubleshooting decision trees
- FAQ sections with common issues
- API reference documentation
- Security best practices

# Formatting Rules

## Markdown Guidelines

- Use semantic headings consistently
- Include code blocks with language specifiers
- Structure data in tables when applicable
- Apply emphasis and strong tags meaningfully
- Include hyperlinks with descriptive text
- Use blockquotes for important notes
- Follow accessibility guidelines

## Diagrams and Visuals

- Use mermaid for technical diagrams
- Keep diagrams focused and simple
- Include legends for complex visuals
- Maintain consistent visual style
- Update diagrams with code changes
- Provide text alternatives
- Use high contrast colors

# Documentation Workflow

## Creation Process

- Document during development
- Update docs with code changes
- Include documentation in PR reviews
- Test all code examples
- Validate accessibility
- Update related documents
- Version documentation appropriately

## Maintenance Strategy

- Schedule regular documentation audits
- Version documentation with features
- Archive outdated content
- Validate technical accuracy
- Collect and incorporate feedback
- Monitor documentation usage
- Automate validation where possible

## Automated Documentation

- Use documentation linters
- Implement automated testing for code examples
- Validate links automatically
- Check accessibility compliance
- Generate API documentation
- Track documentation coverage
- Monitor documentation health

# Best Practices

- Link to source code when referencing implementation
- Include version information clearly
- Document breaking changes prominently
- Provide migration guides for major updates
- Keep examples current with latest practices
- Follow accessibility guidelines
- Use inclusive language
- Maintain documentation changelog

# Version Control

- Commit documentation with related code changes
- Use clear commit messages for doc updates
- Review documentation in pull requests
- Tag documentation versions
- Maintain changelog for significant updates
- Archive obsolete versions
- Track documentation debt

Remember: Clear beats comprehensive, examples beat explanation, current beats complete, and accessible beats assumption.
